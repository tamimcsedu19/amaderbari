<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2015-05-11T00:55:39Z</updated>
  <entry>
    <title>To My Fellow Students:</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/11/to-my-fellow-students" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-04-24:2096</id>
    <updated>2015-05-11T00:55:39Z</updated>
    <content type="html">&lt;p&gt;&amp;ldquo;You are always a student, never a master. You have to keep moving forward.&amp;rdquo; -Conrad Hall&lt;/p&gt;&lt;p&gt;&amp;ldquo;The empires of the future are the empires of the mind.&amp;rdquo; -Winston Churchill &lt;/p&gt;&lt;p&gt;&amp;ldquo;You have brains in your head. You have feet in your shoes. You can steer yourself any direction you choose.&amp;rdquo; -Dr. Seuss &lt;/p&gt;&lt;p&gt;&amp;ldquo;Good students are good at all things.&amp;rdquo; -Marissa Mayer &lt;/p&gt;&lt;p&gt;&amp;ldquo;The person who never made a mistake never tried anything new.&amp;rdquo; -Albert Einstein &lt;/p&gt;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: if you&amp;rsquo;re a seasoned developer, than this may not be the post you&amp;rsquo;re looking for. Keep reading, anyway. I&amp;rsquo;ll bet you know some developers who are taking their first steps and, maybe, this could help them!&lt;/p&gt;&lt;p&gt;Hi!. &lt;a href="http://twitter.com/starbuxman"&gt;I&amp;rsquo;m Josh (@starbuxman)&lt;/a&gt;. I work as &lt;a href="http://spring.io/team/jlong"&gt;the Spring developer advocate&lt;/a&gt; at Pivotal and I, like the rest of the team, spend a lot of time talking to a &lt;em&gt;lot&lt;/em&gt; of really amazing people. We talk to all manner of developers: conference attendees, customers, students, C-levels and interns alike. I personally have made friends on every continent (save Antarctica! One day..) and interacted - online or sometimes in-person - with developers in every timezone. While I enjoy every selfie, hand-shake, discussion, forum thread, Twitter conversation, and email thread, the exchanges that really stick with me are the ones from students. They&amp;rsquo;re often finding their way not just with Spring, but with Java in general and programming at large. They (foolishly!!) assume I have a clue. Those conversations weigh heavily on me. It&amp;rsquo;s very important to not send them off in the wrong direction, if possible. This post is an attempt to capture a lot of these discussions.&lt;/p&gt;&lt;h2&gt;&lt;a href="#a-journey-of-a-thousand-miles" class="anchor" name="a-journey-of-a-thousand-miles"&gt;&lt;/a&gt;A Journey of a Thousand Miles..&lt;/h2&gt;&lt;p&gt;Sometimes students ask about how to get started. I don&amp;rsquo;t even know where to begin. Get started in.. &lt;em&gt;what&lt;/em&gt;? Sometimes I talk to young people trying to start programming. As often as not, these are people who I get introduced to by their parents. These young people know there&amp;rsquo;s a prize - for the inspired it&amp;rsquo;s a life filled with passion and new peaks to summit - waiting for those who make the journey, but they don&amp;rsquo;t know how to take the first steps.&lt;/p&gt;&lt;p&gt;Most of the people I&amp;rsquo;ve talked to started building applications to see something ..dance. In my generation, many of us started with Basic games, and later a lot of developers started with something related to HTML and JavaScript, or even Flash. My first steps in Java were, after all, with Applets! These days, I see a lot of young people taking their first steps with Android or iOS or, even more recently, with Arduino and Minecraft mods. It&amp;rsquo;s encouraging to be able to make something dance. Visual feedback is satisfying, it&amp;rsquo;s encouraging. Put another way, I don&amp;rsquo;t know any young, aspiring programmers who just can&amp;rsquo;t stop thinking about CRON jobs!&lt;/p&gt;&lt;p&gt;There are many outlets for young people to get started with programming. Some of my favorites are Devoxx4Kids, Code.org (_the Hour of Code_) and Coder Dojo.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.devoxx4kids.org/"&gt;Devoxx4Kids&lt;/a&gt; is a non-profit organization that was spun out of the Devoxx conferences and has chapters and events world-wide (though more are &lt;em&gt;always&lt;/em&gt; welcome!). Devoxx4Kids connects qualified adult volunteers, a large and growing set of fun exercises, labs and technologies, and kids to run events worldwide aimed at inspiring young people (teenagers) to take their first steps with people there to help them.&lt;/p&gt;&lt;p&gt;&lt;a href="http://code.org"&gt;Code.org&lt;/a&gt; is a similar movement that has garnered the attention and endorsements of modern-day celebrities like Microsoft founder Bill Gates, Facebook founder Mark Zuckerberg, US president Bill Clinton, and musician Will.i.am to encourage young people to get involved in code. There are educational resources and - every year - the community stages an hour of code event worldwide to encourage young people to write their first lines of code. In 2014, US president Obama participated and wrote his first lines of code in JavaScript! Like Devoxx4Kids, the &lt;em&gt;Hour of Code&lt;/em&gt; movement sees thousands of events and workshops spring up world-wide where young people can go and get help taking their first steps programming.&lt;/p&gt;&lt;p&gt;&lt;a href="https://coderdojo.com/"&gt;Coder Dojo&lt;/a&gt; is a global network of free programming clubs for young people.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.khanacademy.org/"&gt;Khan Academy&lt;/a&gt; has numerous online learning resources for all manner of subjects, not just computer science. There &lt;em&gt;Computer Programing&lt;/em&gt; section is expansive, though. &lt;/p&gt;&lt;h2&gt;&lt;a href="#what-rsquo-s-beyond-the-horizon" class="anchor" name="what-rsquo-s-beyond-the-horizon"&gt;&lt;/a&gt;What&amp;rsquo;s Beyond the Horizon&lt;/h2&gt;&lt;p&gt;Sometimes I talk to students further down the road, at university perhaps, starting to understand what it means to &lt;em&gt;program&lt;/em&gt; a computer, and now eager to apply their newfound power. For them, it&amp;rsquo;s not about making the conceptual leap into programming, it&amp;rsquo;s about taking the next steps and applying it to some problem space. &lt;/p&gt;&lt;p&gt;I&amp;rsquo;m going to &lt;em&gt;attempt&lt;/em&gt; to lay out the universe of technology as I see it these days and explain what each discipline is. This list isn&amp;rsquo;t even close to exhaustive. It&amp;rsquo;s important to understand that disciplines are not exclusive. Many developers straddle many disciplines and mix-and-match as required. This is the ideal. Program &lt;em&gt;all&lt;/em&gt; the things! Specialization is for insects! Be the &lt;em&gt;Renaissance programmer&lt;/em&gt; the world needs.&lt;/p&gt;&lt;p&gt;This list couldn&amp;rsquo;t possibly be exhaustive and I&amp;rsquo;m happy to have any additions in the comments.&lt;/p&gt;&lt;p&gt;I will also try to link to relevant introductory material and popular technologies in this space. My perspective is of course my own. There are no doubt other resources out there, but I&amp;rsquo;m going with what I know works.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Web Programming&lt;/strong&gt;: This, I think, is the most natural place to start for developers today because &lt;em&gt;everything&lt;/em&gt; is connected to the web. Web programming refers to both the job of creating HTTP-based web applications (like Amazon.com) with pages, forms, etc., and to creating APIs. Humans talk to web applications (usually from a browser) and machines talk to APIs. Today, the most popular way to create APIs is to use REST. Web programming &lt;em&gt;also&lt;/em&gt; refers to the work of &lt;em&gt;consuming&lt;/em&gt; other web services, as you might act as a client to the Facebook API, for example. When people talk about web-development, they&amp;rsquo;re usually talking about things like &lt;a href="http://spring.io/guides/gs/rest-service/"&gt;REST web-services&lt;/a&gt;, &lt;a href="http://spring.io/guides/gs/securing-web/"&gt;web security&lt;/a&gt;, &lt;a href="http://spring.io/guides/tutorials/spring-security-and-angular-js/"&gt;OAuth&lt;/a&gt;, &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html"&gt;web testing&lt;/a&gt;, JavaScript, CSS, and APIs. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Front-End &amp;amp; (Rich or Mobile) Client Development&lt;/strong&gt;: For every web application out there, there are an increasing number of screens from which to consume it: Android-based devices, Apple iOS devices, video game consoles, TVs, cars, desktop and mobile browsers, etc. When we talk about front end development that usually, at least, refers to building &lt;a href="http://spring.io/guides/tutorials/spring-security-and-angular-js/"&gt;browser-based JavaScript&lt;/a&gt; and HTML5 applications as well as mobile applications (typically &lt;a href="http://spring.io/guides/gs/consuming-rest-android/"&gt;Android&lt;/a&gt; and &lt;a href="http://spring.io/guides/gs/consuming-rest-ios"&gt;iOS&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SQL Data Processing&lt;/strong&gt;: A diminishing, but still non-trivial, amount of application data is stored in relational databases (RDBMSes) like MySQL and PostgreSQL. These databases use a query language called SQL. You&amp;rsquo;ll find there are myriad technologies to talk to these databases. In the JVM space, one typically uses &lt;a href="http://spring.io/guides/gs/relational-data-access/"&gt;JDBC&lt;/a&gt; and &lt;a href="http://spring.io/guides/gs/accessing-data-jpa/"&gt;JPA&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NoSQL Data Processing&lt;/strong&gt;: RDBMSes may be the entrenched technology, but it&amp;rsquo;s by no means the only way of storing data. Often, application data has specialized storage requirements. Maybe the data is better described not in a set &lt;a href="http://spring.io/guides/gs/accessing-data-jpa/"&gt;of loosely connected tables&lt;/a&gt;, but &lt;a href="http://spring.io/guides/gs/accessing-data-neo4j/"&gt;as a graph of nodes&lt;/a&gt;, or as a series &lt;a href="http://spring.io/guides/gs/accessing-data-mongodb/"&gt;of less rigid &lt;em&gt;documents&lt;/em&gt;&lt;/a&gt;, or perhaps the use cases require the ability to &lt;a href="https://github.com/spring-projects/spring-data-elasticsearch"&gt;do full text searches on the data&lt;/a&gt;. In any case, you&amp;rsquo;ll end up using a so-called &lt;a href="http://en.wikipedia.org/wiki/NoSQL"&gt;&lt;em&gt;Not-only-SQL&lt;/em&gt; or a No-SQL&lt;/a&gt; solution for these sorts of requirements.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Big-Data Processing&lt;/strong&gt;: while RDBMSes may be ubiquitous, and NoSQL may be more efficient or natural for certain types of data, some data sets require specialized processing techniques simply because there is &lt;em&gt;so much&lt;/em&gt; of it. This category of processing is called big-data. There is often overlap between NoSQL and big-data. When we talk about big-data processing, most people think of technologies like &lt;a href="http://projects.spring.io/spring-hadoop/"&gt;Apache Hadoop&lt;/a&gt;, &lt;a href="http://spring.io/guides/gs/yarn-batch-processing/"&gt;YARN&lt;/a&gt;, &lt;a href="https://spring.io/blog/2015/04/15/using-apache-kafka-for-integration-and-data-processing-pipelines-with-spring"&gt;Apache Kafka&lt;/a&gt; and stream-processing solutions &lt;a href="http://spring.io/guides/gs/spring-xd/"&gt;like Spring XD&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Embedded Development&lt;/strong&gt;: This space is huge, and - I confess - I know very little about it. Today, in 2015, Java and C are very, very popular programming languages. C is 40+ years old, though! It continues to be so popular because it can run in &lt;em&gt;very&lt;/em&gt; tiny computing environments, like watches, alarm clocks, refrigerators, cars, etc. When people talk about embedded development, they may be talking about using Linux, C, and custom microprocessors to build solutions for low-memory footprint devices. My theory is that this domain will decline in popularity over time as even the smaller things in our lives (cars, mobile phones), now have power enough to run more recent programming languages like Java, JavaScript, Groovy, etc.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Cloud Computing&lt;/strong&gt;: in 2007, Amazon.com (yes, the book reseller) announced that it was going to make it possible to &lt;em&gt;rent&lt;/em&gt; computers from them by the hour, &lt;em&gt;on-demand&lt;/em&gt;. No human intervention was required, just APIs. It thus became possible to build software that could accommodate so many requests from users and - if demand grew - to dynamically &lt;em&gt;add&lt;/em&gt; more computers and install new software! Since then, the world&amp;rsquo;s changed dramatically, and when we talk about cloud computing today we&amp;rsquo;re talking about how to build applications that are &lt;em&gt;elastic&lt;/em&gt; - they can shrink and grow by adding capacity, dynamically. Imagine for example a website (like Amazon.com!) that has requires many, many more computers during big holidays like Christmas, because vastly more people are buying things. Historically, adding computer capacity meant somebody had to buy new machines, go to the data center and install new machines and operating systems, connect them to the network, etc., etc. Today developers use a layers of software on top of the raw-metal hardware to treat the hardware as a giant pool of resources. For developers and operators to be able to move as quickly as possible to business demand, they need the ability to elastically deploy, manage and scale applications. a Platform-as-a-Service lets you do this. When people talk about cloud computing today, they&amp;rsquo;re probably talking about lower level infrastructure technologies like Amazon Web Services and Docker, and higher-level Platforms-as-a-Service like Heroku, and Pivotal&amp;rsquo;s open-source &lt;a href="http://spring.io/guides/gs/sts-cloud-foundry-deployment/"&gt;Cloud Foundry&lt;/a&gt;. Cloud Foundry is a the whole layer above the infrastructure. Newer versions of Cloud Foundry support runing containerized workloads. One popular container is the aforementioned Docker. If you want to get a taste for what it&amp;rsquo;s like to build, manage and scale containerized workloads on your local desktop machine, check out &lt;a href="http://lattice.cf/docs/getting-started/"&gt;Lattice&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Application Integration&lt;/strong&gt;: as we move forward in time, there&amp;rsquo;s an increasing number of applications and services that have been developed without knowledge of each other. The work of making two otherwise ignorant applications share data and services is called &lt;em&gt;application integration&lt;/em&gt;. There are different ways to handle this chore, but the work typically involves reading, adapting, and writing data between systems. For this one might use enterprise application integration and message-driven architectures, or batch-processing. When we talk about application integration, we&amp;rsquo;re typically talking about technologies like Rendez-Vous, &lt;a href="http://spring.io/guides/gs/messaging-jms/"&gt;JMS&lt;/a&gt;, MQ Series, &lt;a href="http://spring.io/guides/gs/messaging-rabbitmq/"&gt;RabbitMQ&lt;/a&gt;, and &lt;a href="http://spring.io/guides/gs/integration"&gt;Spring Integration&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Internet of Things&lt;/strong&gt;: this is related to embedded development. It&amp;rsquo;s the idea that most devices today can or already do have an IP addresses. They&amp;rsquo;re networked. Examples include alarm clocks, coffee makers, home security systems, and refrigerators. Typically they generate a lot of data (as you might expect 24/7 consumer devices to do) and so it becomes important to use &lt;a href="http://docs.spring.io/spring-integration/reference/html/mqtt.html"&gt;lightweight protocols like MQTT&lt;/a&gt; to manage the traffic.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s important to understand that these things blend into each other. If you care about scaling application availability with cloud-computing, you&amp;rsquo;ll probably also care about APIs and you&amp;rsquo;ll probably also care about big-data and NoSQL. If you care about APIs, you&amp;rsquo;ll probably also care about how to connect those APIs to client technologies like Android. I&amp;rsquo;ve made these distinctions so you can start.. somewhere! Pick a vertical, for now, but always dare to venture beyond. You&amp;rsquo;ll be rewarded for your curiosity.&lt;/p&gt;&lt;h2&gt;&lt;a href="#always-be-learning" class="anchor" name="always-be-learning"&gt;&lt;/a&gt;Always Be Learning!&lt;/h2&gt;&lt;p&gt;The best engineers start their day under the assumption that they&amp;rsquo;re going to learn something before they get home. If your projects at work are monotonous, then get new projects.&lt;/p&gt;&lt;p&gt;Keep apprised of the latest and greatest news, if you can. There is no end to available resources to read the latest software releases, and watch interesting new published tech talks.&lt;/p&gt;&lt;p&gt;Here are some resources I check everyday before I start working, typically over coffee and lunch:&lt;/p&gt;&lt;p&gt;&lt;a href="http://infoq.com"&gt;InfoQ&lt;/a&gt; is an online tech portal with news on all manner of subjects and technology verticals.&lt;/p&gt;&lt;p&gt;&lt;a href="http://reddit.com"&gt;Reddit&lt;/a&gt; is an amazing place to find all sorts of news, not just on technology. I keep a few different &lt;em&gt;sub-Reddits&lt;/em&gt; bookmarked: &lt;a href="http://reddit.com/r/programming"&gt;programming&lt;/a&gt;, &lt;a href="http://reddit.com/r/java"&gt;Java&lt;/a&gt; for technology. I keep a few others for decidedly &lt;em&gt;non&lt;/em&gt; technical content, too! :D&lt;/p&gt;&lt;p&gt;&lt;a href="http://hackernews.ycombinator.com"&gt;Hacker News&lt;/a&gt; is another (moderated) link aggregator. It typicall provides some pretty deep stuff. I like it as a way of keeping an eye on the &lt;em&gt;edge&lt;/em&gt; of technology.&lt;/p&gt;&lt;p&gt;&lt;a href="http://dzone.com"&gt;DZone&lt;/a&gt; can be nice if you don&amp;rsquo;t mind sifting through the noise to find interesting posts. It&amp;rsquo;s a link aggregator, like Reddit.&lt;/p&gt;&lt;p&gt;&lt;a href="http://virtualjug.com"&gt;the Virtual JUG&lt;/a&gt; is an online &lt;em&gt;virtual&lt;/em&gt; Java User Group that&amp;rsquo;s aired live over YouTube and features experts from around the Java community on a regular basis. Recordings of the talks are available on YouTube afterwards.&lt;/p&gt;&lt;p&gt;&lt;a href="http://github.com/"&gt;GitHub&lt;/a&gt; is an online community for developers to collaborate on code. It builds on the &lt;code&gt;git&lt;/code&gt; source-control and revision system, but integrates issue tracking, collaboration tools, documentation, and much more. It is &lt;em&gt;by-far&lt;/em&gt; the largest community of developers and - my favorite part - there are &lt;em&gt;tons&lt;/em&gt; of great (and some not so great!) open-source code examples on there that you can search for and peruse. Want to get good at programming? Fix some bugs and work on a team. We call that &lt;em&gt;scratching your own itch&lt;/em&gt;. It&amp;rsquo;ll improve your skills, give you valuable experience working with often very-skilled developers, and - if you make any kind of contributions to a project with users - you might possibly make somebody else&amp;rsquo;s day better. Win-win!&lt;/p&gt;&lt;p&gt;&lt;a href="http://stackoverflow.com"&gt;StackOverflow.com&lt;/a&gt; is an question-and-answer forum. Have a question on programing? Chances are someone else already had the same one. Search and behold. Or, if you can&amp;rsquo;t find the right result, ask away. As you start to have the answers, give back by answering other people&amp;rsquo;s questions.&lt;/p&gt;&lt;p&gt;&lt;a href="http://spring.io/blog"&gt;the Spring Blog&lt;/a&gt; If you&amp;rsquo;ll permit me one more plug, we &lt;em&gt;do&lt;/em&gt; publish a lot of blogs on a crazy diverse set of topics, so I hope you&amp;rsquo;ll check this blog out as well ;-)&lt;/p&gt;&lt;h2&gt;&lt;a href="#you-mention-java-a-lot" class="anchor" name="you-mention-java-a-lot"&gt;&lt;/a&gt;You Mention Java a Lot..&lt;/h2&gt;&lt;p&gt;I work with the Java language, which runs on top of the Java Virtual Machine. Java is a boring little language, I think, for the better. It lends itself to novices who want to start building things, and not struggling with the syntax. It helps the experienced too because it&amp;rsquo;s fairly consistent to read. I, personally, quite like Java. It&amp;rsquo;s expressive enough while still being easy enough to pickup and read. Whether you like Java the language or not, however, everybody agrees that the JVM (as a platform) is second-to-none. Virtually all the big-web giants (Twitter, Netflix, Google, eBay, Amazon.com, Yahoo!, etc) use the JVM in a majority capacity. The JVM is battle tested and well established. T&lt;/p&gt;&lt;p&gt;here are always alternatives, of course, but it should not be surprising that getting started in big-data, NoSQL, cloud-computing, mobile development, web APIs and more all require some proficiency of the JVM. If you don&amp;rsquo;t like the Java language (though, you should try Java 8! You might like it..), there are &lt;em&gt;plenty&lt;/em&gt; of mature alternatives like &lt;a href="http://www.groovy-lang.org/"&gt;Groovy&lt;/a&gt;, Scala, Clojure (Lisp on the JVM), &lt;a href="http://jruby.org"&gt;JRuby&lt;/a&gt; (Ruby on the JVM), Jython (Python on the JVM), Kotlin, and Ceylon, all of which run on the JVM. That&amp;rsquo;s right - you get the most powerful language runtime in the world, in the language flavor of your choice.&lt;/p&gt;&lt;h2&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;&lt;p&gt;This whole blog has been about next steps. Congratulations on taking the first steps! You&amp;rsquo;ll make a lot of friends, solve a lot of interesting problems, and have a lot of fun if you put your mind to it. &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring AMQP 1.4.5.RELEASE and 1.5.0.M1 Available</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/08/spring-amqp-1-4-5-release-and-1-5-0-m1-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2015-05-07:2114</id>
    <updated>2015-05-08T08:02:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that the latest maintenance release for Spring AMQP (1.4.5.RELEASE) is now available. This contains just a &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10450&amp;version=14993"&gt;few bug fixes since 1.4.4&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In addition, the first milestone release for the 1.5 release is also available (1.5.0.M1). A release candidate will be available in a month or so, with the GA expected later in the summer.&lt;/p&gt;&lt;p&gt;The main features of this release are highlighted below:&lt;/p&gt;&lt;h2&gt;&lt;a href="#class-level-code-rabbitlistener-code" class="anchor" name="class-level-code-rabbitlistener-code"&gt;&lt;/a&gt;Class-level &lt;code&gt;@RabbitListener&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;It is now possible to define the &lt;code&gt;@RabbitListener&lt;/code&gt; annotation at the class level. Together with method-level &lt;code&gt;@RabbitHandler&lt;/code&gt; annotations, this allows a single listener to invoke different methods in the class, depending on the payload type. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@RabbitListener(queues=&amp;quot;orders, shipments&amp;quot;)&#xD;
public class MultiListenerBean {&#xD;
&#xD;
    @RabbitHandler&#xD;
    public OrderConfirmation handleOrder(Order order) {&#xD;
        ...    &#xD;
    }&#xD;
&#xD;
    @RabbitHandler&#xD;
    public Invoice ship(Shipment shipment) {&#xD;
        ...&#xD;
    }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#auto-declare-queues-and-bindings-for-code-rabbitlistener-code" class="anchor" name="auto-declare-queues-and-bindings-for-code-rabbitlistener-code"&gt;&lt;/a&gt;Auto-Declare Queues and Bindings for &lt;code&gt;@RabbitListener&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;It is now possible to automatically declare queues, exchanges and bindings when using the &lt;code&gt;@RabbitListener&lt;/code&gt; annotation.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@RabbitListener(bindings = @QueueBinding(&#xD;
	value = @Queue(value = &amp;quot;auto.declare&amp;quot;, autoDelete = &amp;quot;true&amp;quot;),&#xD;
	exchange = @Exchange(value = &amp;quot;auto.exch&amp;quot;, autoDelete = &amp;quot;true&amp;quot;),&#xD;
	key = &amp;quot;auto.rk&amp;quot;))&#xD;
public String handleWithDeclare(String foo) {&#xD;
	return foo.toUpperCase();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, the queue &lt;code&gt;auto.declare&lt;/code&gt; is declared and bound to exchange &lt;code&gt;auto.exch&lt;/code&gt; with routing key &lt;code&gt;auto.rk&lt;/code&gt;. The exchange is declared too.&lt;/p&gt;&lt;p&gt;Previously, the &lt;code&gt;Queue&lt;/code&gt;, &lt;code&gt;Exchange&lt;/code&gt; and &lt;code&gt;Binding&lt;/code&gt; had to be declared as separate &lt;code&gt;@Bean&lt;/code&gt;s.&lt;/p&gt;&lt;h2&gt;&lt;a href="#configurable-exchange-routing-key-for-replies" class="anchor" name="configurable-exchange-routing-key-for-replies"&gt;&lt;/a&gt;Configurable Exchange/Routing Key for Replies&lt;/h2&gt;&lt;p&gt;Previously, when using request/reply messaging with the &lt;code&gt;RabbitTemplate&lt;/code&gt;, replies were routed to the default exchange and routed with the queue name. It is now possible to supply a &lt;code&gt;reply-address&lt;/code&gt; with the form &lt;code&gt;exchange/routingKey&lt;/code&gt; to route using a specific exchange and routing key.&lt;/p&gt;&lt;h2&gt;&lt;a href="#rabbitmanagementtemplate" class="anchor" name="rabbitmanagementtemplate"&gt;&lt;/a&gt;RabbitManagementTemplate&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;spring-erlang&lt;/code&gt; jar is no longer provided. Users are encouraged to use the RabbitMQ REST API instead. The RabbitMQ team are working on a Java binding for the REST API and Spring AMQP now provides a lightweight wrapper for that API using the familiar &lt;code&gt;Queue&lt;/code&gt;, &lt;code&gt;Exchange&lt;/code&gt; and &lt;code&gt;Binding&lt;/code&gt; domain objects.&lt;/p&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Complete details of the new features can be found in the &lt;a href="http://docs.spring.io/spring-amqp/docs/1.5.0.M1/reference/html/_introduction.html#_changes_in_1_5_since_1_4"&gt;What&amp;rsquo;s New section of the reference manual&lt;/a&gt; and the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10450&amp;version=14837"&gt;JIRA release notes&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Users are encouraged to try the new features before the GA release and provide feedback using the normal channels (&lt;code&gt;spring-amqp&lt;/code&gt; tag on Stack Overflow, and JIRA).&lt;/p&gt;&lt;p&gt;See &lt;a href="http://projects.spring.io/spring-amqp/"&gt;the project page&lt;/a&gt; for links to documentation and downloads.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay:  Smarter Service-to-Service Invocations with Spring Cloud</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/07/webinar-replay-smarter-service-to-service-invocations-with-spring-cloud" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-07:2115</id>
    <updated>2015-05-07T13:42:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Josh Long &lt;/p&gt;
&lt;p&gt;Slides:&lt;a href="https://speakerdeck.com/joshlong/smarter-service-to-service-invocation-with-spring-cloud"&gt; https://speakerdeck.com/joshlong/smarter-service-to-service-invocation-with-spring-cloud &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud 1.0 is here! It offers a powerful way to create and consume microservices. As you introduce new services, you introduce integration problems: services can be shaky, they can disappear and - as they're often exposed over HTTP - they require a bit more footwork than in-process method invocations. In this webinar, we'll focus specifically on how Spring Cloud integrates service registration (e.g.: Eureka, Consul, or Zookeeper), declarative REST clients (with Netflix's Feign), reactive programming and the circuit breaker pattern with Hystrix to support easy, robust service-to-service invocations.&lt;/p&gt;
&lt;p&gt;Learn about about Spring Cloud at &lt;a href="http://projects.spring.io/spring-cloud"&gt;http://projects.spring.io/spring-cloud&lt;/a&gt;&lt;a href="http://projects.spring.io/spring-cloud"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn about about Spring Boot at &lt;a href="http://projects.spring.io/spring-security"&gt;http://projects.spring.io/spring-boot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/my3yr8Arq2g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: A Comprehensive Spring Showcase: Personal Cloud Storage Application</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/06/webinar-a-comprehensive-spring-showcase-personal-cloud-storage-application" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-05:2110</id>
    <updated>2015-05-06T07:06:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Erdem Gunay, Turkcell&lt;/p&gt;
&lt;p&gt;Turkcell launched a personal cloud storage service few years ago. Adding new business features was costly in terms of time and budget on the legacy solution. The user experience needed to be improved. Finally, it was decided to build a new solution where Spring Boot and Spring Framework projects play crucial role as the backbone.&#xD;
The project was completed just in 6 months starting from scratch. The solution was built on top of Spring Boot and many Spring IO Platform projects, allowing the development team focus on business logic instead of configuration &amp; integration details. The project has been divided into deployable modules (API, backend, migration, test automation) accessing micro services that are responsible for one task only. Join Erdem for a review of the migration effort and new architecture - all enabled by Spring Boot.&lt;/p&gt;&lt;p&gt;Tuesday, June 9th, 2015 2:00PM GMT (London GMT) &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMComprehensiveSpringShowcasePersonalCloudStorageApplication_Register.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, June 9th, 2015 10:00AM PDT (San Francisco GMT-07:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMComprehensiveSpringShowcasePersonalCloudStorageApp_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - May 5th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/05/this-week-in-spring-may-5th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-05-05:2113</id>
    <updated>2015-05-05T15:16:52Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in Las Vegas at the mega EMC World event.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Security lead Rob Winch has just announced that &lt;a href="http://spring.io/blog/2015/05/05/spring-security-saml-1-0-1-released"&gt;Spring Security SAML 1.0.1 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Phillip Verheyden&amp;rsquo;s talk offers a very pragmatic look at&lt;a href="http://spring.io/blog/2015/05/05/springone2gx-2014-replay-migrating-to-spring-4-from-spring-3-what-you-need-to-know"&gt;how to move Spring 3 application&lt;/a&gt; - including dependencies like Jackson and Hibernate - to take advantage of newer and new features in Spring 4.x.&lt;/li&gt;
  &lt;li&gt;My pal Adib Saikali&amp;rsquo;s SpringOne2GX 2014 talk on building a &lt;a href="http://spring.io/blog/2015/05/05/springone2gx-2014-replay-great-single-page-apps-need-great-backends"&gt;rich client backends with Spring is now up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t miss this replay of Spring ninja Greg Turnquist&amp;rsquo;s &lt;a href="http://spring.io/blog/2015/05/05/webinar-debug-and-maintain-your-spring-boot-app"&gt;talk on debugging and maintaining Spring Boot applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dustin Whittle&amp;rsquo;s talk &lt;a href="http://spring.io/blog/2015/05/05/springone2gx-2014-replay-performance-testing-crash-course"&gt;on how to performance testing (Spring) applications&lt;/a&gt; is filled with useful tools, tips-and-tricks for performance testing applications using Siege, Bees with Machine Guns, Google PageSpeed, WBench, and more.&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t miss our pal Marten Deinum&amp;rsquo;s May 12th webinar on &lt;a href="http://spring.io/blog/2015/05/05/webinar-improving-your-legacy-application-with-spring"&gt;modernizing &lt;em&gt;legacy&lt;/em&gt; Spring applications&lt;/a&gt;. I can&amp;rsquo;t wait to listen to this one! Regular &lt;em&gt;This Week in Spring&lt;/em&gt; readers know he almost always makes an appearance in our roundup!&lt;/li&gt;
  &lt;li&gt;Spring Data ninja &lt;a href="http://spring.io/blog/2015/04/30/spring-for-apache-hadoop-2-2-m1-released"&gt;Thomas Risberg just announced Spring for Apache Hadoop 2.2 M1&lt;/a&gt;. The new release includes newer supported dependencies, better support for for Hiveserver2 including a batch tasklet, support for a batch tasklet to run Spark apps, Spring Boot-integration, smarter security integration, and integration with Spring Cloud components, and much more!&lt;/li&gt;
  &lt;li&gt;The good Dr. Pollack &lt;a href="http://spring.io/blog/2015/04/30/spring-xd-1-2-m1-and-1-1-2-released"&gt;just announced Spring XD 1.2 M1&lt;/a&gt; (including a preview of the astonishing Spring Flo visual editor, improved Cassandra and Kafka integration, and much more) and 1.1.2 which contains bugfixes. I can&amp;rsquo;t wait to see some of the stuff in Spring XD 1.2.M1.&lt;/li&gt;
  &lt;li&gt;Spring Security lead Rob Winch just announced Spring LDAP 2.0.3.RELEASE, which &lt;a href="http://spring.io/blog/2015/04/30/spring-ldap-2-0-3-released"&gt;is mainly a bugfix release&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out Unicon&amp;rsquo;s recently developed &lt;a href="https://github.com/Unicon/cas-client-autoconfig-support"&gt;CAS-client auto-configuration for Spring Boot&lt;/a&gt;. CAS is a sort of single-sign on for the web. &lt;a href="https://github.com/Unicon/cas-client-autoconfig-support"&gt;https://github.com/Unicon/cas-client-autoconfig-support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out Sébastien Deleuze&amp;rsquo;s talk from Spring I/O to learn more about &lt;a href="https://speakerdeck.com/sdeleuze/isomorphic-templating-with-spring-boot-nashorn-and-react"&gt;Spring framework 4.2&amp;rsquo;s upcoming support for isomorphic&lt;/a&gt; (scripted on both server and client) views using React.js and Handlebars.&lt;/li&gt;
  &lt;li&gt;Check out this post to learn how to deploy a Spring Boot application to AWS using Elastic Beanstalk](&lt;a href="http://mtdevuk.com/2015/02/10/how-to-deploy-a-spring-boot-application-to-amazon-aws-using-elastic-beanstalk/"&gt;http://mtdevuk.com/2015/02/10/how-to-deploy-a-spring-boot-application-to-amazon-aws-using-elastic-beanstalk/&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Java Code Geek has a nice post aggregating the top Java &lt;a href="http://www.javacodegeeks.com/2015/04/we-analyzed-60678-libraries-on-github-here-are-the-top-100.html?utm_content=buffereb42f&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer"&gt;libraries represented by imports in some 60,000+ libraries on GitHub&lt;/a&gt;. The numbers are &lt;em&gt;very&lt;/em&gt; telling: Spring libraries feature the most frequently, taken together, and Spring Test, in particular, comes right after JUnit (ahead of the likes of Mockito!) in terms of popularity. I also like that many of the &lt;em&gt;other&lt;/em&gt; non-Spring libaries represented are very often included a Spring Boot starter. Convenient!&lt;/li&gt;
  &lt;li&gt;Check out the upcoming &lt;a href="https://vaadin.com/spring"&gt;May 7th webinar on using Spring and Vaadin together&lt;/a&gt; if you&amp;rsquo;re a Vaadin developer, you&amp;rsquo;re going to want to know about Spring Boot!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Security SAML 1.0.1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/05/spring-security-saml-1-0-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2015-05-04:2106</id>
    <updated>2015-05-05T13:37:22Z</updated>
    <content type="html">&lt;p&gt;I&amp;rsquo;m pleased to announce the release of Spring Security SAML 1.0.1. This release is passive to 1.0.0 the highlights of which are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added support for Spring Security 4.0&lt;/li&gt;
  &lt;li&gt;Added integration guide with &lt;a href="http://docs.spring.io/spring-security-saml/docs/1.0.1.RELEASE/reference/html/chapter-idp-guide.html#d5e1816"&gt;Okta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MaxAuthenticationAge time supports longer expiration times than 21 days&lt;/li&gt;
  &lt;li&gt;Deployment without JKS keystore is now supported&lt;/li&gt;
  &lt;li&gt;Service provider can now define multiple assertion consumer endpoints with same binding&lt;/li&gt;
  &lt;li&gt;Minor fixes and documentation improvements&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href="https://spring.io/spring-security-saml"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-security-saml/docs/1.0.x/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-security-saml/docs/1.0.x/reference/html/chapter-whats-new.html#section-whats-new-highlight-1.0.1"&gt;Changelog&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Migrating to Spring 4 from Spring 3 - What you need to know</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/05/springone2gx-2014-replay-migrating-to-spring-4-from-spring-3-what-you-need-to-know" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-05:2112</id>
    <updated>2015-05-05T07:21:00Z</updated>
    <content type="html">&lt;p&gt;Migrating to Spring 4 from Spring 3 - What you need to know &lt;/p&gt;
&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Phillip Verheyden &lt;/p&gt;
&lt;p&gt;Applied Spring Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/upgrade-tospring4"&gt;http://www.slideshare.net/SpringCentral/upgrade-tospring4&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;In this talk we will cover what it takes to migrate a Spring 3.x application to Spring 4. Some of the questions that we will answer: What improvements does Spring 4 offer over Spring 3 and why should I invest in upgrading? What do I do with all of my current XML configuration? What about dependent library upgrades like Hibernate and Jackson? Part of this talk will focus on updating a specific application based on Spring 3 up to date with Spring 4 and the latest in best practices and design. &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/V4GRyzbyy6Y" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Great single page apps need great backends</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/05/springone2gx-2014-replay-great-single-page-apps-need-great-backends" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-05:2111</id>
    <updated>2015-05-05T07:19:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014.&lt;/p&gt;
&lt;p&gt; Speaker: Adib Saikali &lt;/p&gt;
&lt;p&gt;Web / JavaScript Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/adib-saikali-great-backendneedgreatfrontends"&gt;http://www.slideshare.net/SpringCentral/adib-saikali-great-backendneedgreatfrontends&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This session will get you up to speed on the best practices for building backend services to support highly sophisticated single page apps Using Spring 4. Topics covered include error handling, security, performance, api evolution, automated testing, integration with backbone, AngularJS &amp;amp; RequireJS. The presentation will demo working code examples and a github repo where you can access the demos.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/dJHZQyfOQYY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Debug and Maintain your Spring Boot App</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/05/webinar-debug-and-maintain-your-spring-boot-app" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-05:2109</id>
    <updated>2015-05-05T06:52:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Greg Turnquist&lt;/p&gt;
&lt;p&gt; So you have decided to build an application using Spring Boot? Sooner or later, something will go wrong. It does not matter how experienced we are. How will Spring Boot help us figure out what went wrong and fix things? This talk introduces lots of tools to help us debug and manage &amp;quot;bootiful&amp;quot; apps. You will learn how to use Boot's autoconfiguration report, override Boot's settings &amp;amp; beans, create custom metrics/health checks/app info, and create custom JMX info &amp;amp; custom CRaSH commands.&lt;/p&gt;&lt;p&gt;Tuesday, May 28th, 2015 2:00PM GMT (London GMT) &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMDebugandMaintainyourSpringBootApp_Register.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, May 28th, 2015 10:00AM PDT (San Francisco GMT-07:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMDebugandMaintainyourSpringBootApp_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Performance Testing Crash Course</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/05/springone2gx-2014-replay-performance-testing-crash-course" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-05:2108</id>
    <updated>2015-05-05T06:51:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014.&lt;/p&gt;
&lt;p&gt; Speaker: Dustin Whittle &lt;/p&gt;
&lt;p&gt;Applied Spring Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/performance-testing-crashcourse"&gt;http://www.slideshare.net/SpringCentral/performance-testing-crashcourse&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;The performance of your application affects your business more than you might think. Top engineering organizations think of performance not as a nice-to-have, but as a crucial feature of their product. Those organizations understand that performance has a direct impact on user experience and, ultimately, their bottom line. Unfortunately, most engineering teams do not regularly test the performance and scalability of their infrastructure. Dustin Whittle shares the latest performance testing tools and insights into why your team should add performance testing to the development process. Learn how to evaluate performance and scalability on the server-side and the client-side with tools like Siege, Bees with Machine Guns, Google PageSpeed, WBench, and more. Take back an understanding of how to automate performance and load testing and evaluate the impact it has on performance and your business.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/jE5sN79lZic" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Improving your (legacy) Application with Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/05/webinar-improving-your-legacy-application-with-spring" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-05:2107</id>
    <updated>2015-05-05T06:46:00Z</updated>
    <content type="html">&lt;p&gt;Speakers: Marten Deinum&lt;/p&gt;
&lt;p&gt;Spring has been around since the release of “J2EE Design and Development” in 2002. Spring and Java have evolved quite a bit since that time. In those years a lot of applications have been developed. All those &amp;quot;legacy&amp;quot; applications that are around have proven their value and that is why they lasted. In this session we will explore how we can improve our legacy applications by doing some refactoring or redesign (component based development) but also by introducing (newer) Spring IO technologies.&lt;/p&gt;&lt;p&gt;Tuesday, May 12th, 2015 2:00PM GMT (London GMT) &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMImprovingyourlegacyApplicationwithSpring_Register.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, May 12th, 2015 10:00AM PDT (San Francisco GMT-07:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMImprovingyourlegacyApplicationwithSpring_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring for Apache Hadoop 2.2 M1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/04/30/spring-for-apache-hadoop-2-2-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Thomas Risberg</name>
    </author>
    <id>tag:spring.io,2015-04-30:2105</id>
    <updated>2015-04-30T17:04:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the Spring for Apache Hadoop 2.2 M1 milestone releases.&lt;/p&gt;&lt;p&gt;We continue to provide version specific artifacts with their respective transitive dependencies in the Spring IO milestone repository:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2.2.0.M1 (default - Apache Hadoop stable 2.6.0)&lt;/li&gt;
  &lt;li&gt;2.2.0.M1-phd21 (Pivotal HD 2.1)&lt;/li&gt;
  &lt;li&gt;2.2.0.M1-phd30 (Pivotal HD 3.0)&lt;/li&gt;
  &lt;li&gt;2.2.0.M1-cdh5 (Cloudera CDH5)&lt;/li&gt;
  &lt;li&gt;2.2.0.M1-hdp22 (Hortonworks HDP 2.2)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The most important enhancements in the Spring for Apache Hadoop 2.2 M1 release: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Remove support for running with JDK 6, Java 7 or later is now required&lt;/li&gt;
  &lt;li&gt;Improvements to the HDFS writer to support syncable writes and a new timeout option&lt;/li&gt;
  &lt;li&gt;Add support for Pivotal HD 3.0&lt;/li&gt;
  &lt;li&gt;Update CLoudera CDH 5 to use version 5.3.3&lt;/li&gt;
  &lt;li&gt;Update Hortonworks HDP 2.2 version to 2.2.4.0&lt;/li&gt;
  &lt;li&gt;Update Kite SDK to version 1.0&lt;/li&gt;
  &lt;li&gt;Update Spring project versions to the latest&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For the next milestones and releases we are planning on working on the following features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Better Java Configuration support.&lt;/li&gt;
  &lt;li&gt;Add better support for for Hiveserver2 including a batch tasklet.&lt;/li&gt;
  &lt;li&gt;Basic support for a batch tasklet to run Spark apps.&lt;/li&gt;
  &lt;li&gt;Better boot support throughout the different modules.&lt;/li&gt;
  &lt;li&gt;Improved security support (i.e. the YARN Boot CLI interaction, etc).&lt;/li&gt;
  &lt;li&gt;Enhancements to have seamless integration with spring-cloud components (i.e. spring-cloud-cluster).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Please provide feedback so we can prioritize the work on these features and any additional feature requests. You can use JIRA issues or GitHub issues (see project page for links).&lt;/p&gt;&lt;p&gt;The project page is at - &lt;a href="http://projects.spring.io/spring-hadoop/"&gt;http://projects.spring.io/spring-hadoop/&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring XD 1.2 M1 and 1.1.2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/04/30/spring-xd-1-2-m1-and-1-1-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2015-04-30:2104</id>
    <updated>2015-04-30T16:12:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring XD team, I am very pleased to announce the first milestone release of Spring XD 1.2 and the 1.1.2 maintenance release.&lt;/p&gt;&lt;p&gt;Download Links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.1.2.RELEASE: &lt;a href="http://repo.spring.io/release/org/springframework/xd/spring-xd/1.1.2.RELEASE/spring-xd-1.1.2.RELEASE-dist.zip"&gt;zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;1.2.0.M1: &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/xd/spring-xd/1.2.0.M1/spring-xd-1.2.0.M1-dist.zip"&gt;zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You can also install using &lt;a href="http://docs.spring.io/spring-xd/docs/1.2.0.M1/reference/html/#osx-homebrew-installation"&gt;brew&lt;/a&gt; and &lt;a href="http://docs.spring.io/spring-xd/docs/1.2.0.M1/reference/html/#redhatcentos-installation"&gt;rpm&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The full list of &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=11401&amp;version=14989"&gt;issues fixed for 1.1.2&lt;/a&gt; is available in JIRA. Of note the 1.1.2 release provides PHD 3.0 support.&lt;/p&gt;&lt;p&gt;The 1.2 M1 release includes bug fixes as well and several new features and enhancements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-xd/docs/1.2.0.M1/reference/html/#using-hadoop"&gt;PHD 3.0 support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-xd/docs/1.2.0.M1/reference/html/#mongodb-source"&gt;MongoDB Source&lt;/a&gt;, a &lt;a href="https://github.com/spring-projects/spring-xd/commits?author=agandhinit"&gt;community contribution&lt;/a&gt; from Abhinav Gandhi&lt;/li&gt;
  &lt;li&gt;Module registry backed by HDFS&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-xd/docs/1.2.0.M1/reference/html/#_running_gpload_as_a_batch_job_code_gpload_code"&gt;Greenplum gpload&lt;/a&gt; as provided batch job. This allows for efficient loading from CSV files into Greenplum DB/HAWQ.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd-modules/tree/master/gpfdist"&gt;gpfdist sink&lt;/a&gt; that adheres to the gpfdist protocol. This allows for streaming data in parallel into Greenplum DB/HAWQ.&lt;/li&gt;
  &lt;li&gt;Zookeeper distributed queue based deployment for streams and jobs.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-xd/docs/1.2.0.M1/reference/html/#error-handling-message-delivery-failures"&gt;Improved error handling for RabbitMQ&lt;/a&gt; with Dead Letter Queue and durable queue support for pub/sub named channels (tap: and topic:)&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://docs.spring.io/spring-xd/docs/1.2.0.M1/reference/html/#_running_sqoop_as_a_batch_job_code_sqoop_code"&gt;Sqoop integration improvements&lt;/a&gt;, support for merge and codegen commands as well as running against a secured Hadoop cluster.&lt;/li&gt;
  &lt;li&gt;Kafka message bus improvements, customized partition count for topics created by the message bus. (module.[modulename].producer.minParitionCount)&lt;/li&gt;
  &lt;li&gt;Improved performance characteristics for &lt;a href="https://jira.spring.io/browse/XD-2911"&gt;TupleBuilder&lt;/a&gt; and the &lt;a href="https://jira.spring.io/browse/XD-2815"&gt;JDBC to HDFS&lt;/a&gt; job&lt;/li&gt;
  &lt;li&gt;Spark Streaming integration improvements, reliable receiver support and bug fixes.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The full list of &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=11401&amp;version=14898"&gt;issues fixed for 1.2 M1&lt;/a&gt; is available in JIRA.&lt;/p&gt;&lt;p&gt;Of note for the next release of Spring XD 1.2 RC1 we will be including support for&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kafka message bus &lt;a href="http://bit.ly/1Q3yc6T"&gt;improvements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Cassandra sink&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/mbogoevici/elasticsearch-sink"&gt;Elastic search sink&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Improved HA support for RabbitMQ&lt;/li&gt;
  &lt;li&gt;Incremental data import for JDBC to HDFS job&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The Beta version of Spring Flo for XD - an HTML5 based canvas for creating data pipelines, analytics dashboards, and monitoring - will be released along with XD 1.2 GA. For a sneak peak at the work in progress, watch this screencast: &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/17pLpcdIu_M" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;br/&gt;&lt;/p&gt;&lt;/p&gt;&lt;p&gt;Feedback is very important, so please get in touch with questions and comments via&lt;br/&gt;* &lt;a href="http://stackoverflow.com/questions/tagged/spring-xd"&gt;StackOverflow&lt;/a&gt; &lt;code&gt;spring-xd&lt;/code&gt; tag&lt;br/&gt;* &lt;a href="https://jira.spring.io/browse/XD/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel"&gt;Spring JIRA&lt;/a&gt; or &lt;a href="https://github.com/spring-projects/spring-xd/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="#springone-2gx-2015-is-around-the-corner" class="anchor" name="springone-2gx-2015-is-around-the-corner"&gt;&lt;/a&gt;SpringOne 2GX 2015 is around the corner!&lt;/h1&gt;&lt;p&gt;Book your place at &lt;a href="http://www.springone2gx.com"&gt;SpringOne2GX in Washington, DC soon&lt;/a&gt;. Super Early Bird Price expires June 12th! It&amp;rsquo;s simply the best opportunity to find out first hand all that&amp;rsquo;s going on and to provide direct feedback. Expect a number of significant new announcements this year. Check recent blog posts to see what I mean and there is more to come!&lt;/p&gt;&lt;h1&gt;&lt;a href="#discounts" class="anchor" name="discounts"&gt;&lt;/a&gt;Discounts&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;The Super Early Bird price tier ($300 discount) expires June 12th. The Early Bird price tier (June 13th - August 14th) is discounted $150.&lt;/li&gt;
  &lt;li&gt;Register 4 and get the 5th pass free. Contact us with the names of your first 4 registrants for your complimentary pass code (conference admission only).&lt;/li&gt;
  &lt;li&gt;Alumni, contact us for your discount code ($150 off any option).&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring LDAP 2.0.3 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/04/30/spring-ldap-2-0-3-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2015-04-29:2103</id>
    <updated>2015-04-30T14:21:26Z</updated>
    <content type="html">&lt;p&gt;I’m pleased to announce the release of Spring LDAP 2.0.3.RELEASE. The highlights of this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/LDAP-330"&gt;LDAP-330&lt;/a&gt; - Support for Spring Data Commons 1.10 (Spring Data Fowler)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/LDAP-304"&gt;LDAP-304&lt;/a&gt; - NullPointerException DirContextAdapter.collectModifications&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/LDAP-314"&gt;LDAP-314&lt;/a&gt; - repository methods ignoring @Entity(base=)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/LDAP-317"&gt;LDAP-317&lt;/a&gt; - ldap:context-source/url not parsing properties #{}&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/LDAP-321"&gt;LDAP-321&lt;/a&gt; - IllegalStateException: No value for key PoolingContextSource&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For additional information on the release, refer to the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10071&amp;version=14532"&gt;changelog&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-ldap/"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-ldap/docs/2.0.3.RELEASE/reference/"&gt;Reference&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/LDAP"&gt;Issues&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - April 29th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/04/28/this-week-in-spring-april-29th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-04-28:2099</id>
    <updated>2015-04-28T22:30:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week, I&amp;rsquo;m in Barcelona, Spain for the &lt;a href="http://springio.net"&gt;Spring I/O conference&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;&lt;img  width="400" src ="https://pbs.twimg.com/media/CDs-ekvVEAAwKdH.jpg" /&gt;&lt;img  width="400" src ="https://pbs.twimg.com/media/CDs-eqHVAAAoizY.jpg"/&gt;&lt;br/&gt;&lt;div&gt;(can you spot &lt;a href="http://spring.io/team"&gt;your favorite Spring team&lt;/a&gt; or community member?)&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Social lead Craig Walls just announced the &lt;a href="https://spring.io/blog/2015/04/27/spring-social-facebook-2-0-1-released"&gt;release of Spring Social Facebook 2.0.1&lt;/a&gt;, the first maintenance release in the Spring Social Facebook 2.0 line.&lt;/li&gt;
  &lt;li&gt;the good Dr. Syer just published a &lt;a href="https://spring.io/blog/2015/04/27/binding-to-data-services-with-spring-boot-in-cloud-foundry"&gt;blog on different ways to bind services in Cloud Foundry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Security lead Rob Winch &lt;a href="https://spring.io/blog/2015/04/23/spring-security-4-0-1-released"&gt;just released Spring Security 4.0.1&lt;/a&gt;, the first maintenance release in the Spring Security 4.0 line&lt;/li&gt;
  &lt;li&gt;This Week&amp;rsquo;s SpringOne2GX Replays are out! Marius Bogoevici shows us how to &lt;a href="http://spring.io/blog/2015/04/28/springone2gx-2014-replay-building-highly-modular-and-testable-business-systems-with-spring-integration"&gt;Build highly modular and testable business systems with Spring Integration&lt;/a&gt;, Brian Cavalier talks about &lt;a href="https://spring.io/blog/2015/04/28/springone2gx-2014-replay-efficient-client-server-communication-with-differential-synchronization-and-json-patch"&gt;Efficient Client-Server Communication with Differential Synchronization and JSON Patch&lt;/a&gt; and Topher Bullock and Will Tran review &lt;a href="http://spring.io/blog/2015/04/28/springone2gx-2014-replay-server-side-javascript-with-nashorn-and-spring"&gt;Server-side JavaScript with Nashorn and Spring&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Were you at JAX London last week? No? Then you missed &lt;em&gt;Domain Driven Design&lt;/em&gt; author &lt;a href="https://jaxenter.de/jax-2015-keynote-eric-evans-ddd-microservices-18605"&gt;Eric Evan&amp;rsquo;s talk on bounded contexts with microservices&lt;/a&gt;. Check it out!&lt;/li&gt;
  &lt;li&gt;Zurelsoft&amp;rsquo;s Sanjay Shah put together a decent, &lt;a href="http://blog.zurelsoft.com/blog/what-will-get-you-to-adopt-spring-boot-for-spring-based-applications"&gt;high-level pitch for Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/ewolff"&gt;Eberhard Wolff&lt;/a&gt;&amp;rsquo;s just &lt;a href="https://twitter.com/ewolff/status/592673619496538114"&gt;perfectly expressed&lt;/a&gt; the inertia behind monolithic applications: &amp;ldquo;Monolithic gravity: A large system will attract new features and changes. In the process it will become larger and eventually collapse.&amp;rdquo;&lt;/li&gt;
  &lt;li&gt;My pal Geertjan, who works on Oracle&amp;rsquo;s Netbeans platform, just introduced a very cool contribution from &lt;a href="https://twitter.com/mehieltwit"&gt;Aggelos Karalias&lt;/a&gt; that integrates &lt;a href="https://blogs.oracle.com/geertjan/entry/new_spring_boot_integration_for"&gt;autocompletion support for Spring Boot&amp;rsquo;s metadata about configuration properties&lt;/a&gt;. This support is similar to what&amp;rsquo;s available in the latest STS and IntelliJ IDEA 14.1 releases. Very cool!&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://infoq.com"&gt;InfoQ&lt;/a&gt;&amp;rsquo;s just published a &lt;a href="http://www.infoq.com/news/2015/04/spring-security-4"&gt;nice post on Spring Security 4&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Apache Geode (the core of Pivotal&amp;rsquo;s Gemfire distributed datagrid technology) has just passed a vote &lt;a href="https://www.mail-archive.com/general@incubator.apache.org/msg48427.html"&gt;to be an incubator project in the Apache Software Foundation&lt;/a&gt;! Congratulations!&lt;/li&gt;
  &lt;li&gt;Our pal &lt;a href="http://twitter.com/david_welch"&gt;David Welch&lt;/a&gt; just shared a &lt;a href="https://github.com/Lemniscate/spring-metrics-jdbc"&gt;JDBC-backed &lt;code&gt;MetricRepository&lt;/code&gt;&lt;/a&gt; that looks mighty useful! Check it out!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Building highly modular and testable business systems with Spring Integration</title>
    <link rel="alternate" href="https://spring.io/blog/2015/04/28/springone2gx-2014-replay-building-highly-modular-and-testable-business-systems-with-spring-integration" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-04-29:2100</id>
    <updated>2015-04-28T22:29:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Marius Bogoevici &lt;/p&gt;
&lt;p&gt;Data / Integration Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/building-modular-business-applications"&gt;http://www.slideshare.net/SpringCentral/building-modular-business-applications&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;By its very nature, Spring Integration allows for building sophisticated business systems that aggregate multiple sources of data and orchestrate a complex set of business services. But complex functionality doesn’t have to translate into complex design. In fact, through its emphasis on low coupling, Spring Integration is fostering a highly modular application design, with huge benefits in terms of understandability, reusability and testability. In this session you will learn how to design your Spring Integration applications in a modular fashion, by grouping together logically-related components into subsystems that interact with each other, a core concept of Spring XD, but can be successfully applied in any application. Besides the benefit of a heightened level of abstraction, this approach has a number of other important benefits as well: first, such subsystems are reusable, and, secondly, and equally important, they can be tested in isolation. So, after a brief discussion on reusability, the presentation will focus on how to unit test such subsystems and even complete Spring Integration applications, with the ultimate goal of applying business-centric techniques such as Behaviour-Driven Development. &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/KA2hFQQJE-4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Server-side JavaScript with Nashorn and Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2015/04/28/springone2gx-2014-replay-server-side-javascript-with-nashorn-and-spring" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-04-29:2101</id>
    <updated>2015-04-28T22:28:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014.&lt;/p&gt;
&lt;p&gt; Speakers: Topher Bullock, Will Tran  &lt;/p&gt;
&lt;p&gt;Web / JavaScript Track&lt;/p&gt;
&lt;p&gt; Slides: &lt;a href="http://www.slideshare.net/SpringCentral/serverside-javascript-with-nashorn-and-spring"&gt;http://www.slideshare.net/SpringCentral/serverside-javascript-with-nashorn-and-spring &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To stay competitive, enterprises are scrambling to find ways to rapidly deliver applications that are a pleasure to use on a wide range of devices. Microservice architectures, continuous delivery and the cloud can give businesses the agility to transform into great software businesses, but how do you actually turn those buzzwords into reality? Here we present our take on a solution. Using Spring Boot, Java 8’s Nashorn JavaScript engine, and Cloud Foundry, we’ve created a framework that makes it really easy to deliver API’s to support the rich and highly contextualized experiences that users expect in world class applications. We’d like to share with you what we’ve built, and what we’ve learned along the way.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ceCZte7piJE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Efficient Client-Server Communication with Differential Synchronization and JSON Patch</title>
    <link rel="alternate" href="https://spring.io/blog/2015/04/28/springone2gx-2014-replay-efficient-client-server-communication-with-differential-synchronization-and-json-patch" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-04-29:2102</id>
    <updated>2015-04-28T22:27:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014.&lt;/p&gt;
&lt;p&gt;Speaker: Brian Cavalier &lt;/p&gt;
&lt;p&gt;Web / JavaScript Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/efficient-clientserver-communication-with-differential-synchronization-and-json-patch"&gt;http://www.slideshare.net/SpringCentral/efficient-clientserver-communication-with-differential-synchronization-and-json-patch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The world of client-server has changed. The traditional application of REST is no longer the best fit. We're depolying applications into a world where users expect responsive UIs, on all their devices, even while disconnected. We're deploying into a world where connection latency, mobile radio usage and battery life have become primary concerns. Differential Synchronization (DS) is an algorithm that syncs data across N parties, even in the face of dropped connections, offline devices, etc. It makes more efficient use of connections by batching and sending only changes, in both directions, from client to server and from server to client. We’ll look at how it can be used with JSON Patch to synchronize application data between clients and servers over HTTP Patch, WebSocket, and STOMP, and how it can be integrated into the Spring ecosystem.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="http://www.slideshare.net/SpringCentral/efficient-clientserver-communication-with-differential-synchronization-and-json-patch" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Social Facebook 2.0.1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/04/27/spring-social-facebook-2-0-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Craig Walls</name>
    </author>
    <id>tag:spring.io,2015-04-27:2098</id>
    <updated>2015-04-27T17:30:17Z</updated>
    <content type="html">&lt;p&gt;I&amp;rsquo;m pleased to announce the release of Spring Social Facebook 2.0.1.RELEASE. This maintenance release addresses a handful of bugs that were discovered following the 2.0.0.RELEASE two weeks ago. For complete details regarding this release, see the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10607&amp;version=14996"&gt;changelog&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Note that if you&amp;rsquo;re using Spring Social Facebook with Spring Boot, the Spring Boot starter for Spring Social Facebook still references 1.1.1.RELEASE. But you can override that by explicitly declaring the 2.0.1.RELEASE dependency in your Maven or Gradle build. See the &lt;a href="https://github.com/spring-projects/spring-social-samples/blob/master/spring-social-showcase-boot/build.gradle"&gt;Spring Social Showcase/Spring Boot example&lt;/a&gt; to see how this is done.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-social-facebook/"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-social-facebook/docs/2.0.1.RELEASE/reference/htmlsingle/"&gt;Reference&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-social-facebook/docs/2.0.1.RELEASE/apidocs/"&gt;JavaDoc&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Binding to Data Services with Spring Boot in Cloud Foundry</title>
    <link rel="alternate" href="https://spring.io/blog/2015/04/27/binding-to-data-services-with-spring-boot-in-cloud-foundry" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-04-23:2093</id>
    <updated>2015-04-27T14:10:00Z</updated>
    <content type="html">&lt;p&gt;In this article we look at how to bind a &lt;a href="http://projects.spring.io/spring-boot"&gt;Spring Boot&lt;/a&gt; application to data services (JDBC, NoSQL, messaging etc.) and the various sources of default and automatic behaviour in &lt;a href="http://pivotal.io/cloud"&gt;Cloud Foundry&lt;/a&gt;, providing some guidance about which ones to use and which ones will be active under what conditions. Spring Boot provides a lot of autoconfiguration and external binding features, some of which are relevant to Cloud Foundry, and many of which are not. &lt;a href="http://cloud.spring.io/spring-cloud-connectors"&gt;Spring Cloud Connectors&lt;/a&gt; is a library that you can use in your application if you want to create your own components programmatically, but it doesn&amp;rsquo;t do anything &amp;ldquo;magical&amp;rdquo; by itself. And finally there is the Cloud Foundry &lt;a href="https://github.com/cloudfoundry/java-buildpack"&gt;java buildpack&lt;/a&gt; which has an &amp;ldquo;auto-reconfiguration&amp;rdquo; feature that tries to ease the burden of moving simple applications to the cloud. The key to correctly configuring middleware services, like JDBC or AMQP or Mongo, is to understand what each of these tools provides, how they influence each other at runtime, and and to switch parts of them on and off. The goal should be a smooth transition from local execution of an application on a developer&amp;rsquo;s desktop to a test environment in Cloud Foundry, and ultimately to production in Cloud Foundry (or otherwise) with no changes in source code or packaging, per the &lt;a href="http://12factor.net"&gt;twelve-factor application&lt;/a&gt; guidelines.&lt;/p&gt;&lt;p&gt;There is some &lt;a href="https://github.com/dsyer/cloud-middleware-blog"&gt;simple source code&lt;/a&gt; accompanying this article. To use it you can clone the repository and import it into your favourite IDE. You will need to remove two dependencies from the complete project to get to the same point where we start discussing concrete code samples, namely &lt;code&gt;spring-boot-starter-cloud-connectors&lt;/code&gt; and &lt;code&gt;auto-reconfiguration&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: The current co-ordinates for all the libraries being discussed are &lt;code&gt;org.springframework.boot:spring-boot-*:1.2.3.RELEASE&lt;/code&gt;, &lt;code&gt;org.springframework.boot:spring-cloud-*-connector:1.1.1.RELEASE&lt;/code&gt;, &lt;code&gt;org.cloudfoundry:auto-reconfiguration:1.7.0.RELEASE&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;TIP: The source code in github includes a &lt;code&gt;docker-compose.yml&lt;/code&gt; file (&lt;a href="https://docs.docker.com/compose/"&gt;docs here&lt;/a&gt;). You can use that to create a local MySQL database if you don&amp;rsquo;t have one running already. You don&amp;rsquo;t actually need it to run most of the code below, but it might be useful to validate that it will actually work.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#punchline-for-the-impatient" class="anchor" name="punchline-for-the-impatient"&gt;&lt;/a&gt;Punchline for the Impatient&lt;/h2&gt;&lt;p&gt;If you want to skip the details, and all you need is a recipe for running locally with H2 and in the cloud with MySQL, then start here and read the rest later when you want to understand in more depth. (Similar options exist for other data services, like RabbitMQ, Redis, Mongo etc.)&lt;/p&gt;&lt;p&gt;Your first and simplest option is to simply do nothing: do not define a &lt;code&gt;DataSource&lt;/code&gt; at all but put H2 on the classpath. Spring Boot will create the H2 embedded &lt;code&gt;DataSource&lt;/code&gt; for you when you run locally. The Cloud Foundry buildpack will detect a database service binding and create a &lt;code&gt;DataSource&lt;/code&gt; for you when you run in the cloud. If you add Spring Cloud Connectors as well, your app will also work in other cloud platforms, as long as you include a connector. That might be good enough if you just want to get something working.&lt;/p&gt;&lt;p&gt;If you want to run a serious application in production you might want to tweak some of the connection pool settings (e.g. the size of the pool, various timeouts, the important test on borrow flag). In that case the buildpack auto-reconfiguration &lt;code&gt;DataSource&lt;/code&gt; will not meet your requirements and you need to choose an alternative, and there are a number of more or less sensible choices. &lt;/p&gt;&lt;p&gt;The best choice is probably to create a &lt;code&gt;DataSource&lt;/code&gt; explicitly using &lt;a href="http://cloud.spring.io/spring-cloud-connectors"&gt;Spring Cloud Connectors&lt;/a&gt;, but guarded by the &amp;ldquo;cloud&amp;rdquo; profile:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
@Profile(&amp;quot;cloud&amp;quot;)&#xD;
public class DataSourceConfiguration {&#xD;
&#xD;
  @Bean&#xD;
  public Cloud cloud() {&#xD;
    return new CloudFactory().getCloud();&#xD;
  }&#xD;
&#xD;
  @Bean&#xD;
  @ConfigurationProperties(DataSourceProperties.PREFIX)&#xD;
  public DataSource dataSource() {&#xD;
    return cloud().getSingletonServiceConnector(DataSourceclass, null);&#xD;
  }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use &lt;code&gt;spring.datasource.*&lt;/code&gt; properties (e.g. in &lt;code&gt;application.properties&lt;/code&gt; or a profile-specific version of that) to set the additional properties at runtime. The &amp;ldquo;cloud&amp;rdquo; profile is automatically activated for you by the buildpack.&lt;/p&gt;&lt;p&gt;Now for the details. We need to build up a picture of what&amp;rsquo;s going on in your application at runtime, so we can learn from that how to make a sensible choice for configuring data services.&lt;/p&gt;&lt;h2&gt;&lt;a href="#layers-of-autoconfiguration" class="anchor" name="layers-of-autoconfiguration"&gt;&lt;/a&gt;Layers of Autoconfiguration&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s take a a simple app with &lt;code&gt;DataSource&lt;/code&gt; (similar considerations apply to RabbitMQ, Mongo, Redis):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
public class CloudApplication {&#xD;
	&#xD;
	@Autowired&#xD;
	private DataSource dataSource;&#xD;
	&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(CloudApplication.class, args);&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a complete application: the &lt;code&gt;DataSource&lt;/code&gt; can be &lt;code&gt;@Autowired&lt;/code&gt; because it is created for us by Spring Boot. The details of the &lt;code&gt;DataSource&lt;/code&gt; (concrete class, JDBC driver, connection URL, etc.) depend on what is on the classpath. Let&amp;rsquo;s assume that the application uses Spring JDBC via the &lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt; (or &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;), so it has a &lt;code&gt;DataSource&lt;/code&gt; implementation available from Tomcat (even if it isn&amp;rsquo;t a web application), and this is what Spring Boot uses.&lt;/p&gt;&lt;p&gt;Consider what happens when:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;Classpath contains H2 (only) in addition to the starters: the &lt;code&gt;DataSource&lt;/code&gt; is the Tomcat high-performance pool from &lt;code&gt;DataSourceAutoConfiguration&lt;/code&gt; and it connects to an in memory database &amp;ldquo;testdb&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Classpath contains H2 and MySQL: &lt;code&gt;DataSource&lt;/code&gt; is still H2 (same as before) because we didn&amp;rsquo;t provide any additional configuration for MySQL and Spring Boot can&amp;rsquo;t guess the credentials for connecting.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Add &lt;code&gt;spring-boot-starter-cloud-connectors&lt;/code&gt; to the classpath: no change in &lt;code&gt;DataSource&lt;/code&gt; because the Spring Cloud Connectors do not detect that they are running in a Cloud platform. The providers that come with the starter all look for specific environment variables, which they won&amp;rsquo;t find unless you set them, or run the app in Cloud Foundry, Heroku, etc.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Run the application in &amp;ldquo;cloud&amp;rdquo; profile with &lt;code&gt;spring.profiles.active=cloud&lt;/code&gt;: no change yet in the &lt;code&gt;DataSource&lt;/code&gt;, but this is one of the things that the &lt;a href="https://github.com/cloudfoundry/java-buildpack"&gt;Java buildpack&lt;/a&gt; does when your application runs in Cloud Foundry.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Run in &amp;ldquo;cloud&amp;rdquo; profile and provide some environment variables to simulate running in Cloud Foundry and binding to a MySQL service: &lt;/p&gt;
  &lt;pre&gt;&lt;code class="prettyprint javascript"&gt;VCAP_APPLICATION={&amp;quot;name&amp;quot;:&amp;quot;application&amp;quot;,&amp;quot;instance_id&amp;quot;:&amp;quot;FOO&amp;quot;}&#xD;
VCAP_SERVICES={&amp;quot;mysql&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;mysql&amp;quot;,&amp;quot;tags&amp;quot;:[&amp;quot;mysql&amp;quot;],&#xD;
    &amp;quot;credentials&amp;quot;:{&amp;quot;uri&amp;quot;:&amp;quot;mysql://root:root@localhost/test&amp;quot;}}]}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(the &amp;ldquo;tags&amp;rdquo; provides a hint that we want to create a MySQL &lt;code&gt;DataSource&lt;/code&gt;, the &amp;ldquo;uri&amp;rdquo; provides the location, and the &amp;ldquo;name&amp;rdquo; becomes a bean ID). The &lt;code&gt;DataSource&lt;/code&gt; is now using MySQL with the credentials supplied by the &lt;code&gt;VCAP_*&lt;/code&gt; environment variables. Spring Boot has some autoconfiguration for the Connectors, so if you looked at the beans in your application you would see a &lt;code&gt;CloudFactory&lt;/code&gt; bean, and also the &lt;code&gt;DataSource&lt;/code&gt; bean (with ID &amp;ldquo;mysql&amp;rdquo;). The &lt;a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java"&gt;autoconfiguration&lt;/a&gt; is equivalent to adding &lt;code&gt;@ServiceScan&lt;/code&gt; to your application configuration. It is only active if your application runs in the &amp;ldquo;cloud&amp;rdquo; profile, and only if there is no existing &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;Cloud&lt;/code&gt;, and the configuration flag &lt;code&gt;spring.cloud.enabled&lt;/code&gt; is not &amp;ldquo;false&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Add the &amp;ldquo;auto-reconfiguration&amp;rdquo; JAR from the Java buildpack (Maven co-ordinates &lt;code&gt;org.cloudfoundry:auto-reconfiguration:1.7.0.RELEASE&lt;/code&gt;). You can add it as a local dependency to simulate running an application in Cloud Foundry, but it wouldn&amp;rsquo;t be normal to do this with a real application (this is just for experimenting with autoconfiguration). The auto-reconfiguration JAR now has everything it needs to create a &lt;code&gt;DataSource&lt;/code&gt;, but it doesn&amp;rsquo;t (yet) because it detects that you already have a bean of type &lt;code&gt;CloudFactory&lt;/code&gt;, one that was added by Spring Boot.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Remove the explicit &amp;ldquo;cloud&amp;rdquo; profile. The profile will still be active when your app starts because the auto-reconfiguration JAR adds it back again. There is still no change to the &lt;code&gt;DataSource&lt;/code&gt; because Spring Boot has created it for you via the &lt;code&gt;@ServiceScan&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Remove the &lt;code&gt;spring-boot-starter-cloud-connectors&lt;/code&gt; dependency, so that Spring Boot backs off creating a &lt;code&gt;CloudFactory&lt;/code&gt;. The auto-reconfiguration JAR actually has its own copy of Spring Cloud Connectors (all the classes with different package names) and it now uses them to create a &lt;code&gt;DataSource&lt;/code&gt; (in a &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;). The Spring Boot autoconfigured &lt;code&gt;DataSource&lt;/code&gt; is replaced with one that binds to MySQL via the &lt;code&gt;VCAP_SERVICES&lt;/code&gt;. There is no control over pool properties, but it does still use the Tomcat pool if available (no support for Hikari or DBCP2).&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Remove the auto-reconfiguration JAR and the &lt;code&gt;DataSource&lt;/code&gt; reverts to H2.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;TIP: use web and actuator starters with &lt;code&gt;endpoints.health.sensitive=false&lt;/code&gt; to inspect the &lt;code&gt;DataSource&lt;/code&gt; quickly through &amp;ldquo;/health&amp;rdquo;. You can also use the &amp;ldquo;/beans&amp;rdquo;, &amp;ldquo;/env&amp;rdquo; and &amp;ldquo;/autoconfig&amp;rdquo; endpoints to see what is going in in the autoconfigurations and why.&lt;/p&gt;&lt;p&gt;NOTE: Running in Cloud Foundry or including auto-reconfiguration JAR in classpath locally both activate the &amp;ldquo;cloud&amp;rdquo; profile (for the same reason). The &lt;code&gt;VCAP_*&lt;/code&gt; env vars are the thing that makes Spring Cloud and/or the auto-reconfiguration JAR create beans.&lt;/p&gt;&lt;p&gt;NOTE: The URL in the &lt;code&gt;VCAP_SERVICES&lt;/code&gt; is actually not a &amp;ldquo;jdbc&amp;rdquo; scheme, which should be mandatory for JDBC connections. This is, however, the format that Cloud Foundry normally presents it in because it works for nearly every language other than Java. Spring Cloud Connectors or the buildpack auto-reconfiguration, if they are creating a &lt;code&gt;DataSource&lt;/code&gt;, will translate it into a &lt;code&gt;jdbc:*&lt;/code&gt; URL for you.&lt;/p&gt;&lt;p&gt;NOTE: The MySQL URL also contains user credentials and a database name which are valid for the Docker container created by the &lt;code&gt;docker-compose.yml&lt;/code&gt; in the sample source code. If you have a local MySQL server with different credentials you could substitute those.&lt;/p&gt;&lt;p&gt;TIP: If you use a local MySQL server and want to verify that it is connected, you can use the &amp;ldquo;/health&amp;rdquo; endpoint from the Spring Boot Actuator (included in the sample code already). Or you could create a &lt;code&gt;schema-mysql.sql&lt;/code&gt; file in the root of the classpath and put a simple keep alive query in it (e.g. &lt;code&gt;SELECT 1&lt;/code&gt;). Spring Boot will run that on startupso if the app starts successfully you have configured the database correctly.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;The auto-reconfiguration JAR is always on the classpath in Cloud Foundry (by default) but it backs off creating any &lt;code&gt;DataSource&lt;/code&gt; if it finds a &lt;code&gt;org.springframework.cloud.CloudFactory&lt;/code&gt; bean (which is provided by Spring Boot if the &lt;code&gt;CloudAutoConfiguration&lt;/code&gt; is active). Thus the net effect of adding it to the classpath, if the Connectors are also present in a Spring Boot application, is only to enable the &amp;ldquo;cloud&amp;rdquo; profile. You can see it making the decision to skip auto-reconfiguration in the application logs on startup:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;015-04-14 15:11:11.765  INFO 12727 --- [           main] urceCloudServiceBeanFactoryPostProcessor : Skipping auto-reconfiguring beans of type javax.sql.DataSource&#xD;
2015-04-14 15:11:57.650  INFO 12727 --- [           main] ongoCloudServiceBeanFactoryPostProcessor : Skipping auto-reconfiguring beans of type org.springframework.data.mongodb.MongoDbFactory&#xD;
2015-04-14 15:11:57.650  INFO 12727 --- [           main] bbitCloudServiceBeanFactoryPostProcessor : Skipping auto-reconfiguring beans of type org.springframework.amqp.rabbit.connection.ConnectionFactory&#xD;
2015-04-14 15:11:57.651  INFO 12727 --- [           main] edisCloudServiceBeanFactoryPostProcessor : Skipping auto-reconfiguring beans of type org.springframework.data.redis.connection.RedisConnectionFactory&#xD;
...&#xD;
etc.
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#create-your-own-datasource" class="anchor" name="create-your-own-datasource"&gt;&lt;/a&gt;Create your own DataSource&lt;/h2&gt;&lt;p&gt;The last section walked through most of the important autoconfiguration features in the various libraries. If you want to take control yourself, one thing you could start with is to create your own instance of &lt;code&gt;DataSource&lt;/code&gt;. You could do that, for instance, using a &lt;code&gt;DataSourceBuilder&lt;/code&gt; which is a convenience class and comes as part of Spring Boot (it chooses an implementation based on the classpath):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
public class CloudApplication {&#xD;
	&#xD;
	@Bean&#xD;
	public DataSource dataSource() {&#xD;
		return DataSourceBuilder.create().build();&#xD;
	}&#xD;
	&#xD;
	...&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;DataSource&lt;/code&gt; as we&amp;rsquo;ve defined it is useless because it doesn&amp;rsquo;t have a connection URL or any credentials, but that can easily be fixed. Let&amp;rsquo;s run this application as if it was in Cloud Foundry: with the &lt;code&gt;VCAP_*&lt;/code&gt; environment variables and the auto-reconfiguration JAR but not Spring Cloud Connectors on the classpath and no explicit &amp;ldquo;cloud&amp;rdquo; profile. The buildpack activates the &amp;ldquo;cloud&amp;rdquo; profile, creates a &lt;code&gt;DataSource&lt;/code&gt; and binds it to the &lt;code&gt;VCAP_SERVICES&lt;/code&gt;. As already described briefly, it &lt;em&gt;removes&lt;/em&gt; your &lt;code&gt;DataSource&lt;/code&gt; completely and replaces it with a manually registered singleton (which doesn&amp;rsquo;t show up in the &amp;ldquo;/beans&amp;rdquo; endpoint in Spring Boot).&lt;/p&gt;&lt;p&gt;Now add Spring Cloud Connectors back into the classpath the application and see what happens when you run it again. It actually fails on startup! What has happened? The &lt;code&gt;@ServiceScan&lt;/code&gt; (from Connectors) goes and looks for bound services, and creates bean definitions for them. That&amp;rsquo;s a bit like the buildpack, but different because it doesn&amp;rsquo;t attempt to replace any existing bean definitions of the same type. So you get an autowiring error because there are 2 &lt;code&gt;DataSources&lt;/code&gt; and no way to choose one to inject into your application in various places where one is needed.&lt;/p&gt;&lt;p&gt;To fix that we are going to have to take control of the Cloud Connectors (or simply not use them).&lt;/p&gt;&lt;h3&gt;&lt;a href="#using-a-cloudfactory-to-create-a-datasource" class="anchor" name="using-a-cloudfactory-to-create-a-datasource"&gt;&lt;/a&gt;Using a CloudFactory to create a DataSource&lt;/h3&gt;&lt;p&gt;You can disable the Spring Boot autoconfiguration &lt;em&gt;and&lt;/em&gt; the Java buildpack auto-reconfiguration by creating your own &lt;code&gt;Cloud&lt;/code&gt; instance as a &lt;code&gt;@Bean&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
public Cloud cloud() {&#xD;
  return new CloudFactory().getCloud();&#xD;
}&#xD;
&#xD;
@Bean&#xD;
@ConfigurationProperties(DataSourceProperties.PREFIX)&#xD;
public DataSource dataSource() {&#xD;
  return cloud().getSingletonServiceConnector(DataSource.class, null);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pros: The Connectors autoconfiguration in Spring Boot backed off so there is only one &lt;code&gt;DataSource&lt;/code&gt;. It can be tweaked using &lt;code&gt;application.properties&lt;/code&gt; via &lt;code&gt;spring.datasource.*&lt;/code&gt; properties, per the &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/"&gt;Spring Boot User Guide&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Cons: It doesn&amp;rsquo;t work without &lt;code&gt;VCAP_*&lt;/code&gt; environment variables (or some other cloud platform). It also relies on user remembering to ceate the &lt;code&gt;Cloud&lt;/code&gt; as a &lt;code&gt;@Bean&lt;/code&gt; in order to disable the autoconfiguration.&lt;/p&gt;&lt;p&gt;Summary: we are still not in a comfortable place (an app that doesn&amp;rsquo;t run without some intricate wrangling of environment variables is not much use in practice).&lt;/p&gt;&lt;h2&gt;&lt;a href="#dual-running-local-with-h2-in-the-cloud-with-mysql" class="anchor" name="dual-running-local-with-h2-in-the-cloud-with-mysql"&gt;&lt;/a&gt;Dual Running: Local with H2, in the Cloud with MySQL&lt;/h2&gt;&lt;p&gt;There is a local configuration file option in Spring Cloud Connectors, so you don&amp;rsquo;t have to be in a real cloud platform to use them, but it&amp;rsquo;s awkward to set up despite being boiler plate, and you also have to somehow switch it off when you &lt;em&gt;are&lt;/em&gt; in a real cloud platform. The last point there is really the important one because you end up needing a local file to run locally, but only running locally, and it can&amp;rsquo;t be packaged with the rest of the application code (for instance violates the twelve factor guidelines).&lt;/p&gt;&lt;p&gt;So to move forward with our explicit &lt;code&gt;@Bean&lt;/code&gt; definition it&amp;rsquo;s probably better to stick to mainstream Spring and Spring Boot features, e.g. using the &amp;ldquo;cloud&amp;rdquo; profile to guard the explicit creation of a &lt;code&gt;DataSource&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
@Profile(&amp;quot;cloud&amp;quot;)&#xD;
public class DataSourceConfiguration {&#xD;
&#xD;
  @Bean&#xD;
  public Cloud cloud() {&#xD;
    return new CloudFactory().getCloud();&#xD;
  }&#xD;
&#xD;
  @Bean&#xD;
  @ConfigurationProperties(DataSourceProperties.PREFIX)&#xD;
  public DataSource dataSource() {&#xD;
    return cloud().getSingletonServiceConnector(DataSource.class, null);&#xD;
  }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this in place we have a solution that works smoothly both locally and in Cloud Foundry. Locally Spring Boot will create a &lt;code&gt;DataSource&lt;/code&gt; with an H2 embedded database. In Cloud Foundry it will bind to a singleton service of type &lt;code&gt;DataSource&lt;/code&gt; and switch off the autconfigured one from Spring Boot. It also has the benefit of working with any platform supported by Spring Cloud Connectors, so the same code will run on Heroku and Cloud Foundry, for instance. Because of the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; you can bind additional configuration to the &lt;code&gt;DataSource&lt;/code&gt; to tweak connection pool properties and things like that if you need to in production.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: We have been using MySQL as an example database server, but actually PostgreSQL is at least as compelling a choice if not more. When paired with H2 locally, for instance, you can put H2 into its &amp;ldquo;Postgres compatibility&amp;rdquo; mode and use the same SQL in both environments.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#manually-creating-a-local-and-a-cloud-datasource" class="anchor" name="manually-creating-a-local-and-a-cloud-datasource"&gt;&lt;/a&gt;Manually Creating a Local and a Cloud DataSource&lt;/h2&gt;&lt;p&gt;If you like creating &lt;code&gt;DataSource&lt;/code&gt; beans, and you want to do it both locally and in the cloud, you could use 2 profiles (&amp;ldquo;cloud&amp;rdquo; and &amp;ldquo;local&amp;rdquo;), for example. But then you would have to find a way to activate the &amp;ldquo;local&amp;rdquo; profile by default when not in the cloud. There is already a way to do that built into Spring because there is always a default profile called &amp;ldquo;default&amp;rdquo; (by default). So this should work:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
@Profile(&amp;quot;default&amp;quot;) // or &amp;quot;!cloud&amp;quot;&#xD;
public class LocalDataSourceConfiguration {&#xD;
	&#xD;
	@Bean&#xD;
    @ConfigurationProperties(DataSourceProperties.PREFIX)&#xD;
	public DataSource dataSource() {&#xD;
		return DataSourceBuilder.create().build();&#xD;
	}&#xD;
&#xD;
}&#xD;
&#xD;
@Configuration&#xD;
@Profile(&amp;quot;cloud&amp;quot;)&#xD;
public class CloudDataSourceConfiguration {&#xD;
&#xD;
  @Bean&#xD;
  public Cloud cloud() {&#xD;
    return new CloudFactory().getCloud();&#xD;
  }&#xD;
&#xD;
  @Bean&#xD;
  @ConfigurationProperties(DataSourceProperties.PREFIX)&#xD;
  public DataSource dataSource() {&#xD;
    return cloud().getSingletonServiceConnector(DataSource.class, null);&#xD;
  }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &amp;ldquo;default&amp;rdquo; &lt;code&gt;DataSource&lt;/code&gt; is actually identical to the autoconfigured one in this simple example, so you wouldn&amp;rsquo;t do this unless you needed to, e.g. to create a custom concrete &lt;code&gt;DataSource&lt;/code&gt; of a type not supported by Spring Boot. You might think it&amp;rsquo;s all getting a bit complicated, but in fact Spring Boot is not making it any harder, we are just dealing with the consequences of needing to control the &lt;code&gt;DataSource&lt;/code&gt; construction in 2 environments.&lt;/p&gt;&lt;h2&gt;&lt;a href="#using-a-non-embedded-database-locally" class="anchor" name="using-a-non-embedded-database-locally"&gt;&lt;/a&gt;Using a Non-Embedded Database Locally&lt;/h2&gt;&lt;p&gt;If you don&amp;rsquo;t want to use H2 or any in-memory database locally, then you can&amp;rsquo;t really avoid having to configure it (Spring Boot can guess a lot from the URL, but it will need that at least). So at a minimum you need to set some &lt;code&gt;spring.datasource.*&lt;/code&gt; properties (the URL for instance). That that isn&amp;rsquo;t hard to do, and you can easily set different values in different environments using additional profiles, but as soon as you do that you need to switch &lt;em&gt;off&lt;/em&gt; the default values when you go into the cloud. To do that you could define the &lt;code&gt;spring.datasource.*&lt;/code&gt; properties in a profile-specific file (or document in YAML) for the &amp;ldquo;default&amp;rdquo; profile, e.g. &lt;code&gt;application-default.properties&lt;/code&gt;, and these will not be used in the &amp;ldquo;cloud&amp;rdquo; profile.&lt;/p&gt;&lt;h2&gt;&lt;a href="#a-purely-declarative-approach" class="anchor" name="a-purely-declarative-approach"&gt;&lt;/a&gt;A Purely Declarative Approach&lt;/h2&gt;&lt;p&gt;If you prefer not to write Java code, or don&amp;rsquo;t want to use Spring Cloud Connectors, you might want to try and use Spring Boot autoconfiguration and external properties (or YAML) files for everything. For example Spring Boot creates a &lt;code&gt;DataSource&lt;/code&gt; for you if it finds the right stuff on the classpath, and it can be completely controlled through &lt;code&gt;application.properties&lt;/code&gt;, including all the granular features on the &lt;code&gt;DataSource&lt;/code&gt; that you need in production (like pool sizes and validation queries). So all you need is a way to discover the location and credentials for the service from the environment. The buildpack translates Cloud Foundry &lt;code&gt;VCAP_*&lt;/code&gt; environment variables into usable property sources in the Spring &lt;code&gt;Environment&lt;/code&gt;. Thus, for instance, a &lt;code&gt;DataSource&lt;/code&gt; configuration might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.datasource.url: ${cloud.services.mysql.connection.jdbcurl:jdbc:h2:mem:testdb}&#xD;
spring.datasource.username: ${cloud.services.mysql.connection.username:sa}&#xD;
spring.datasource.password: ${cloud.services.mysql.connection.password:}&#xD;
spring.datasource.testOnBorrow: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &amp;ldquo;mysql&amp;rdquo; part of the property names is the service name in Cloud Foundry (so it is set by the user). And of course the same pattern applies to all kinds of services, not just a JDBC &lt;code&gt;DataSource&lt;/code&gt;. Generally speaking it is good practice to use external configuration and in particular &lt;code&gt;@ConfigurationProperties&lt;/code&gt; since they allow maximum flexibility, for instance to override using System properties or environment variables at runtime.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note: similar features are provided by Spring Boot, which provides &lt;code&gt;vcap.services.*&lt;/code&gt; instead of &lt;code&gt;cloud.services.*&lt;/code&gt;, so you actually end up with more than one way to do this. However, the JDBC urls are not available from the &lt;code&gt;vcap.services.*&lt;/code&gt; properties (non-JDBC services work fine with tthe corresponding &lt;code&gt;vcap.services.*credentials.url&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;One limitation of this approach is it doesn&amp;rsquo;t apply if the application needs to configure beans that are not provided by Spring Boot out of the box (e.g. if you need 2 &lt;code&gt;DataSources&lt;/code&gt;), in which case you have to write Java code anyway, and may or may not choose to use properties files to parameterize it.&lt;/p&gt;&lt;p&gt;Before you try this yourself, though, beware that actually it doesn&amp;rsquo;t work unless you also disable the buildpack auto-reconfiguration (and Spring Cloud Connectors if they are on the classpath). If you don&amp;rsquo;t do that, then they create a new &lt;code&gt;DataSource&lt;/code&gt; for you and Spring Boot cannot bind it to your properties file. Thus even for this declarative approach, you end up needing an explicit &lt;code&gt;@Bean&lt;/code&gt; definition, and you need this part of your &amp;ldquo;cloud&amp;rdquo; profile configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
@Profile(&amp;quot;cloud&amp;quot;)&#xD;
public class CloudDataSourceConfiguration {&#xD;
&#xD;
  @Bean&#xD;
  public Cloud cloud() {&#xD;
    return new CloudFactory().getCloud();&#xD;
  }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is purely to switch off the buildpack auto-reconfiguration (and the Spring Boot autoconfiguration, but that could have been disabled with a properties file entry).&lt;/p&gt;&lt;h2&gt;&lt;a href="#mixed-declarative-and-explicit-bean-definition" class="anchor" name="mixed-declarative-and-explicit-bean-definition"&gt;&lt;/a&gt;Mixed Declarative and Explicit Bean Definition&lt;/h2&gt;&lt;p&gt;You can also mix the two approaches: declare a single &lt;code&gt;@Bean&lt;/code&gt; definition so that you control the construction of the object, but bind additional configuration to it using &lt;code&gt;@ConfigurationProperties&lt;/code&gt; (and do the same locally and in Cloud Foundry). Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
public class LocalDataSourceConfiguration {&#xD;
	&#xD;
	@Bean&#xD;
    @ConfigurationProperties(DataSourceProperties.PREFIX)&#xD;
	public DataSource dataSource() {&#xD;
		return DataSourceBuilder.create().build();&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(where the &lt;code&gt;DataSourceBuilder&lt;/code&gt; would be replaced with whatever fancy logic you need for your use case). And the &lt;code&gt;application.properties&lt;/code&gt; would be the same as above, with whatever additional properties you need for your production settings.&lt;/p&gt;&lt;h2&gt;&lt;a href="#a-third-way-discover-the-credentials-and-bind-manually" class="anchor" name="a-third-way-discover-the-credentials-and-bind-manually"&gt;&lt;/a&gt;A Third Way: Discover the Credentials and Bind Manually&lt;/h2&gt;&lt;p&gt;Another approach that lends itself to platform and environment independence is to declare explicit bean definitions for the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans that Spring Boot uses to bind its autoconfigured connectors. For instance, to set the default values for a &lt;code&gt;DataSource&lt;/code&gt; you can declare a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;DataSourceProperties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
@Primary&#xD;
public DataSourceProperties dataSourceProperties() {&#xD;
    DataSourceProperties properties = new DataSourceProperties();&#xD;
    properties.setInitialize(false);&#xD;
    return properties;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This sets a default value for the &amp;ldquo;initialize&amp;rdquo; flag, and allows other properties to be bound from &lt;code&gt;application.properties&lt;/code&gt; (or other external properties). Combine this with the Spring Cloud Connectors and you can control the binding of the credentials when a cloud service is detected:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;@Autowired(required=&amp;quot;false&amp;quot;)&#xD;
Cloud cloud;&#xD;
&#xD;
@Bean&#xD;
@Primary&#xD;
public DataSourceProperties dataSourceProperties() {&#xD;
    DataSourceProperties properties = new DataSourceProperties();&#xD;
    properties.setInitialize(false);&#xD;
    if (cloud != null) {&#xD;
      List&amp;lt;ServiceInfo&amp;gt; infos = cloud.getServiceInfos(RelationalServiceInfo.class);&#xD;
      if (infos.size()==1) {&#xD;
        RelationalServiceInfo info = (RelationalServiceInfo) infos.get(0);&#xD;
        properties.setUrl(info.getJdbcUrl());&#xD;
        properties.setUsername(info.getUserName());&#xD;
        properties.setPassword(info.getPassword());&#xD;
      }&#xD;
    }&#xD;
    return properties;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and you still need to define the &lt;code&gt;Cloud&lt;/code&gt; bean in the &amp;ldquo;cloud&amp;rdquo; profile. It ends up being quite a lot of code, and is quite unnecessary in this simple use case, but might be handy if you have more complicated bindings, or need to implement some logic to choose a &lt;code&gt;DataSource&lt;/code&gt; at runtime.&lt;/p&gt;&lt;p&gt;Spring Boot has similar &lt;code&gt;*Properties&lt;/code&gt; beans for the other middleware you might commonly use (e.g. &lt;code&gt;RabbitProperties&lt;/code&gt;, &lt;code&gt;RedisProperties&lt;/code&gt;, &lt;code&gt;MongoProperties&lt;/code&gt;). An instance of such a bean marked as &lt;code&gt;@Primary&lt;/code&gt; is enough to reset the defaults for the autoconfigured connector.&lt;/p&gt;&lt;h2&gt;&lt;a href="#deploying-to-multiple-cloud-platforms" class="anchor" name="deploying-to-multiple-cloud-platforms"&gt;&lt;/a&gt;Deploying to Multiple Cloud Platforms&lt;/h2&gt;&lt;p&gt;So far, we have concentrated on Cloud Foundry as the only cloud platform in which to deploy the application. One of the nice features of Spring Cloud Connectors is that it supports other platforms, either out of the box or as extension points. The &lt;code&gt;spring-boot-starter-cloud-connectors&lt;/code&gt; even includes Heroku support. If you do nothing at all, and rely on the autoconfiguration (the lazy programmer&amp;rsquo;s approach), then your application will be deployable in all clouds where you have a connector on the classpath (i.e. Cloud Foundry and Heroku if you use the starter). If you take the explicit &lt;code&gt;@Bean&lt;/code&gt; approach then you need to ensure that the &amp;ldquo;cloud&amp;rdquo; profile is active in the non-Cloud Foundry platforms, e.g. through an environment variable. And if you use the purely declarative approach (or any combination involving properties files) you need to activate the &amp;ldquo;cloud&amp;rdquo; profile and probably also another profile specific to your platform, so that the right properties files end up in the &lt;code&gt;Environment&lt;/code&gt; at runtime.&lt;/p&gt;&lt;h2&gt;&lt;a href="#summary-of-autoconfiguration-and-provided-behaviour" class="anchor" name="summary-of-autoconfiguration-and-provided-behaviour"&gt;&lt;/a&gt;Summary of Autoconfiguration and Provided Behaviour&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;Spring Boot provides &lt;code&gt;DataSource&lt;/code&gt; (also RabbitMQ or Redis &lt;code&gt;ConnectionFactory&lt;/code&gt;, Mongo etc.) if it finds all the right stuff on the classpath. Using the &amp;ldquo;spring-boot-starter-*&amp;rdquo; dependencies is sufficient to activate the behaviour.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Spring Boot also provides an autowirable &lt;code&gt;CloudFactory&lt;/code&gt; if it finds Spring Cloud Connectors on the classpath (but switches off only if it finds a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;Cloud&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;The &lt;code&gt;CloudAutoConfiguration&lt;/code&gt; in Spring Boot also effectively adds a &lt;code&gt;@CloudScan&lt;/code&gt; to your application, which you would want to switch off if you ever needed to create your own &lt;code&gt;DataSource&lt;/code&gt; (or similar).&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;The Cloud Foundry Java buildpack detects a Spring Boot application and activates the &amp;ldquo;cloud&amp;rdquo; profile, unless it is already active. Adding the buildpack auto-reconfiguration JAR does the same thing if you want to try it locally.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Through the auto-reconfiguration JAR, the buildpack also kicks in and creates a &lt;code&gt;DataSource&lt;/code&gt; (ditto RabbitMQ, Redis, Mongo etc.) if it does &lt;em&gt;not&lt;/em&gt; find a &lt;code&gt;CloudFactory&lt;/code&gt; bean or a &lt;code&gt;Cloud&lt;/code&gt; bean (amongst others). So including Spring Cloud Connectors in a Spring Boot application switches off this part of the &amp;ldquo;auto-reconfiguration&amp;rdquo; behaviour (the bean creation).&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Switching off the Spring Boot &lt;code&gt;CloudAutoConfiguration&lt;/code&gt; is easy, but if you do that, you have to remember to switch off the buildpack auto-reconfiguration as well if you don&amp;rsquo;t want it. The only way to do that is to define a bean definition (can be of type &lt;code&gt;Cloud&lt;/code&gt; or &lt;code&gt;CloudFactory&lt;/code&gt; for instance).&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Spring Boot binds &lt;code&gt;application.properties&lt;/code&gt; (and other sources of external properties) to &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans, including but not limited to the ones that it autoconfigures. You can use this feature to tweak pool properties and other settings that need to be different in production environments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#general-advice-and-conclusion" class="anchor" name="general-advice-and-conclusion"&gt;&lt;/a&gt;General Advice and Conclusion&lt;/h2&gt;&lt;p&gt;We have seen quite a few options and autoconfigurations in this short article, and we&amp;rsquo;ve only really used thee libraries (Spring Boot, Spring Cloud Connectors, and the Cloud Foundry buildpack auto-reconfiguration JAR) and one platform (Cloud Foundry), not counting local deployment. The buildpack features are really only useful for very simple applications because there is no flexibility to tune the connections in production. That said it is a nice thing to be able to do when prototyping. There are only three main approaches if you want to achieve the goal of deploying the same code locally and in the cloud, yet still being able to make necessary tweaks in production: &lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;p&gt;Use Spring Cloud Connectors to explicitly create &lt;code&gt;DataSource&lt;/code&gt; and other middleware connections and protect those &lt;code&gt;@Beans&lt;/code&gt; with &lt;code&gt;@Profile(&amp;quot;cloud&amp;quot;)&lt;/code&gt;. The approach always works, but leads to more code than you might need for many applications.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Use the Spring Boot default autoconfiguration and declare the cloud bindings using &lt;code&gt;application.properties&lt;/code&gt; (or in YAML). To take full advantage you have to expliccitly switch off the buildpack auto-reconfiguration as well.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Use Spring Cloud Connectors to discover the credentials, and bind them to the Spring Boot &lt;code&gt;@ConfigurationProperties&lt;/code&gt; as default values if present.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The three approaches are actually not incompatible, and can be mixed using &lt;code&gt;@ConfigurationProperties&lt;/code&gt; to provide profile-specific overrides of default configuration (e.g. for setting up connection pools in a different way in a production environment). If you have a relatively simple Spring Boot application, the only way to choose between the approaches is probably personal taste. If you have a non-Spring Boot application then the explicit &lt;code&gt;@Bean&lt;/code&gt; approach will win, and it may also win if you plan to deploy your application in more than one cloud platform (e.g. Heroku and Cloud Foundry).&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: This blog has been a journey of discovery (who knew there was so much to learn?). Thanks go to all those who helped with reviews and comments, in particular&lt;a href="https://spring.io/team/scottfrederick"&gt;Scott Frederick&lt;/a&gt;, who spotted most of the mistakes in the drafts and always had time to look at a new revision.&lt;/p&gt;
&lt;/blockquote&gt;</content>
  </entry>
</feed>

